(* ========================================================================= *)
(* COMPLETE HLRT VISUALIZATIONS - ALL PHENOMENA FROM PREPRINT *)
(* Interactive exploration of every aspect of the theory *)
(* ========================================================================= *)

Print["🎨 LOADING COMPLETE HLRT VISUALIZATION SUITE"];
Print["=============================================="];

(* ========================================================================= *)
(* SECTION 1: FTL GRAVITATIONAL WAVE VISUALIZATION *)
(* ========================================================================= *)

Print["📡 Creating FTL gravitational wave visualizations..."];

(* FTL Velocity Analysis *)
kRangeFTL = Table[k, {k, 10^6, 10^8, 10^7}];
hValueFTL = 10^(-20);
vGWDataFTL = Table[N[vGW[k, hValueFTL]/c], {k, kRangeFTL}];

plotFTLVelocity = ListLinePlot[Transpose[{kRangeFTL, vGWDataFTL}],
  PlotStyle -> {Thick, Red},
  PlotLabel -> "FTL Gravitational Wave Velocity (Equation 22)",
  AxesLabel -> {"Wavevector k (1/m)", "vGW/c"},
  GridLines -> {None, {1, 1.16}},
  GridLinesStyle -> Directive[Blue, Dashed],
  PlotRange -> All,
  Epilog -> {Text["Target: 1.16c", {5*10^7, 1.2}]}
];

(* Time Difference vs Distance *)
distanceRangeFTL = Table[d, {d, 1, 100, 2}];
timeDiffDataFTL = Table[
  N[(d/c - d/vGW[10^7, 10^(-20)])*10^9], 
  {d, distanceRangeFTL}
];

plotTimeDifference = ListLinePlot[Transpose[{distanceRangeFTL, timeDiffDataFTL}],
  PlotStyle -> {Thick, Green},
  PlotLabel -> "FTL Time Difference Analysis (Equations 23-25)",
  AxesLabel -> {"Distance (m)", "Time Difference (ns)"},
  GridLines -> {{10}, {4.6}},
  GridLinesStyle -> Directive[Red, Dashed],
  PlotRange -> All,
  Epilog -> {Text["Geo-EM Target: 4.6ns @ 10m", {50, 20}]}
];

Print["✓ FTL visualization created"];

(* ========================================================================= *)
(* SECTION 2: HEXAGONAL LATTICE ANISOTROPY VISUALIZATION *)
(* ========================================================================= *)

Print["🔷 Creating hexagonal lattice anisotropy visualizations...");

(* 3D Hexagonal Anisotropy *)
kMax3D = 10^7;
gridSize3D = 25;
kx3D = Table[kx, {kx, -kMax3D, kMax3D, 2*kMax3D/(gridSize3D-1)}];
ky3D = Table[ky, {ky, -kMax3D, kMax3D, 2*kMax3D/(gridSize3D-1)}];
kz3D = 0; (* Cross-section at kz=0 *)

vPhaseData3D = Table[
  N[vPhaseHex[kx, ky, kz3D]/c],
  {kx, kx3D}, {ky, ky3D}
];

plotHexAnisotropy3D = ListPlot3D[vPhaseData3D,
  PlotRange -> All,
  ColorFunction -> "TemperatureMap",
  PlotLabel -> "Hexagonal Lattice Anisotropy (kz=0)",
  AxesLabel -> {"kx", "ky", "vGW/c"},
  InterpolationOrder -> 2,
  PlotPoints -> gridSize3D
];

(* 2D Contour Plot *)
plotHexAnisotropyContour = ListContourPlot[vPhaseData3D,
  ColorFunction -> "TemperatureMap",
  PlotLabel -> "Hexagonal Anisotropy Contours",
  Contours -> 20,
  PlotLegends -> Automatic,
  FrameLabel -> {"kx", "ky"}
];

Print["✓ Hexagonal anisotropy visualizations created"];

(* ========================================================================= *)
(* SECTION 3: CMB HEXAGONAL CORRELATIONS *)
(* ========================================================================= *)

Print["🌌 Creating CMB hexagonal correlation visualizations...");

(* CMB Temperature Correlations *)
lRangeCMB = Table[l, {l, 50, 3000, 50}];
phiRangeCMB = Table[phi, {phi, 0, 2*Pi, Pi/20}];

cmbTempData = Table[
  N[CMBHexCorrelation[l, phi]], 
  {l, lRangeCMB}, {phi, phiRangeCMB}
];

plotCMBTemp = ListPlot3D[cmbTempData,
  ColorFunction -> "SunsetColors",
  PlotLabel -> "CMB Hexagonal Temperature Correlations (Equation 18)",
  AxesLabel -> {"l", "φ", "C_l"},
  PlotRange -> All
];

(* E-mode Polarization *)
cmbEmodeData = Table[
  N[CMBEmodeHex[l, phi]], 
  {l, lRangeCMB}, {phi, phiRangeCMB}
];

plotCMBEmode = ListPlot3D[cmbEmodeData,
  ColorFunction -> "BlueGreenYellow",
  PlotLabel -> "CMB E-mode Polarization Hexagonal Signature",
  AxesLabel -> {"l", "φ", "C_l^EE"},
  PlotRange -> All
];

(* B-mode Polarization *)
cmbBmodeData = Table[
  N[CMBBmodeHex[l, phi]], 
  {l, lRangeCMB}, {phi, phiRangeCMB}
];

plotCMBBmode = ListPlot3D[cmbBmodeData,
  ColorFunction -> "RedBlueTones",
  PlotLabel -> "CMB B-mode Polarization (Hexagonal Signature)",
  AxesLabel -> {"l", "φ", "C_l^BB"},
  PlotRange -> All
];

(* Observable Angular Scales *)
lTestValues = {50, 100, 500, 1000, 3000, 5000};
angularScales = Table[N[observableAngleArcmin[l]], {l, lTestValues}];

plotAngularScales = ListLinePlot[Transpose[{lTestValues, angularScales}],
  PlotStyle -> {Thick, Purple},
  PlotLabel -> "CMB Observable Angular Scales (Equation 19)",
  AxesLabel -> {"Multipole l", "Angular Scale (arcminutes)"},
  GridLines -> {None, {0.5, 5}},
  GridLinesStyle -> Directive[Blue, Dashed],
  Epilog -> {Text["Simons Observatory Range", {2000, 3}]}
];

Print["✓ CMB correlation visualizations created"];

(* ========================================================================= *)
(* SECTION 4: VENUS RESONANCE AND CELESTIAL MECHANICS *)
(* ========================================================================= *)

Print["♀️ Creating Venus resonance visualizations...");

(* Venus Resonance Over Extended Time *)
timeRangeVenus = Table[t, {t, 2020, 2035, 0.25}];
venusResonanceData = Table[N[venusResonance[t]/Phi0], {t, timeRangeVenus}];
ceremonialData = Table[N[ceremonialAlignment[t]], {t, timeRangeVenus}];
totalResonanceData = Table[N[totalResonance[t]/Phi0], {t, timeRangeVenus}];

plotVenusResonance = ListLinePlot[{
  Transpose[{timeRangeVenus, venusResonanceData}],
  Transpose[{timeRangeVenus, ceremonialData}],
  Transpose[{timeRangeVenus, totalResonanceData}]
  },
  PlotStyle -> {{Thick, Blue}, {Thick, Orange}, {Thick, Red}},
  PlotLabel -> "Venus Resonance Enhancement (Equation 48)",
  AxesLabel -> {"Year", "Enhancement Factor"},
  PlotLegends -> {"Venus Cycle", "Ceremonial Alignment", "Total"},
  GridLines -> {{2025}, None},
  GridLinesStyle -> Directive[Red, Dashed]
];

(* Phase Space Analysis *)
phaseRangeVenus = Table[phi, {phi, 0, 4*Pi, Pi/20}];
phaseAmplitudeData = Table[AVenus*Cos[phi], {phi, phaseRangeVenus}];

plotVenusPhase = ListLinePlot[Transpose[{phaseRangeVenus, phaseAmplitudeData}],
  PlotStyle -> {Thick, Blue},
  PlotLabel -> "Venus Resonance Phase Space",
  AxesLabel -> {"Phase (radians)", "Amplitude"},
  PlotRange -> All
];

Print["✓ Venus resonance visualizations created"];

(* ========================================================================= *)
(* SECTION 5: MAGNETIC POLE DYNAMICS AND CDGR *)
(* ========================================================================= *)

Print["🧭 Creating magnetic pole dynamics visualizations...");

(* Cumulative Magnetic Pole Drift *)
timeRangePole = Table[t, {t, 1997, 2035, 1}];
cumulativeDrift = Table[magneticPoleDrift[]*(t - 1997), {t, timeRangePole}];
coreDisplacementData = Table[
  N[coreDisplacement[t, 1997.5, 10^4]*1000], (* Convert to meters *)
  {t, timeRangePole}
];

plotMagneticDrift = ListLinePlot[{
  Transpose[{timeRangePole, cumulativeDrift}],
  Transpose[{timeRangePole, coreDisplacementData/1000}] (* Scale for visibility *)
  },
  PlotStyle -> {{Thick, Red}, {Thick, Blue}},
  PlotLabel -> "Magnetic Pole Drift and Core Displacement",
  AxesLabel -> {"Year", "Displacement"},
  PlotLegends -> {"Cumulative Drift (degrees)", "Core Displacement (km)"},
  GridLines -> {{2025}, None}
];

(* Comparison: Magnetic vs Rotational Pole Motion *)
magneticRate = magneticPoleDrift[];
rotationalRate = rotationalPoleDrift[];
timeComparison = Table[t, {t, 2020, 2030, 1}];
magneticProjection = Table[magneticRate*(t - 2020), {t, timeComparison}];
rotationalProjection = Table[rotationalRate*(t - 2020), {t, timeComparison}];

plotPoleComparison = ListLinePlot[{
  Transpose[{timeComparison, magneticProjection}],
  Transpose[{timeComparison, rotationalProjection}]
  },
  PlotStyle -> {{Thick, Red}, {Thick, Blue}},
  PlotLabel -> "Magnetic vs Rotational Pole Motion (Equations 42-46)",
  AxesLabel -> {"Year", "Cumulative Drift (degrees)"},
  PlotLegends -> {"Magnetic (CDGR)", "Rotational (Conventional)"},
  PlotRange -> All
];

Print["✓ Magnetic pole dynamics visualizations created"];

(* ========================================================================= *)
(* SECTION 6: SCALE-DEPENDENT GRAVITON MASS *)
(* ========================================================================= *)

Print["⚛️ Creating graviton mass visualizations...");

(* Graviton Mass vs Energy *)
energyRangeGraviton = Table[E, {E, 10^8, 10^14, 10^11}];
PhiTestGraviton = Phi0/100;
gravitonMassData = Table[
  N[effectiveGravitonMass[E, PhiTestGraviton]], 
  {E, energyRangeGraviton}
];

plotGravitonMass = ListLogLogPlot[Transpose[{energyRangeGraviton, gravitonMassData}],
  PlotStyle -> {Thick, Purple},
  PlotLabel -> "Scale-Dependent Graviton Mass (Equation 28)",
  AxesLabel -> {"Energy (Hz)", "Effective Mass (eV/c²)"},
  GridLines -> {{10^10, 10^12}, {10^(-22), 10^(-2)}},
  GridLinesStyle -> Directive[Gray, Dashed]
];

(* Graviton Mass vs Field Strength *)
PhiRangeGraviton = Table[Phi, {Phi, Phi0/1000, Phi0, Phi0/100}];
ETestGraviton = 10^12;
gravitonMassPhiData = Table[
  N[effectiveGravitonMass[ETestGraviton, Phi]], 
  {Phi, PhiRangeGraviton}
];

plotGravitonMassPhi = ListLogLogPlot[Transpose[{PhiRangeGraviton/Phi0, gravitonMassPhiData}],
  PlotStyle -> {Thick, Orange},
  PlotLabel -> "Graviton Mass vs Lattice Field Strength",
  AxesLabel -> {"Φ/Φ₀", "Effective Mass (eV/c²)"},
  PlotRange -> All
];

Print["✓ Graviton mass visualizations created"];

(* ========================================================================= *)
(* SECTION 7: DECAY RATES AND CHAOS AMPLIFICATION *)
(* ========================================================================= *)

Print["💥 Creating decay and chaos visualizations...");

(* Linear and Nonlinear Decay Rates *)
frequencyRangeDecay = Table[nu, {nu, 10^10, 10^13, 10^11}];
linearDecayData = Table[N[linearDecayRate[nu]], {nu, frequencyRangeDecay}];
nonlinearDecayData = Table[N[Abs[nonlinearTriadicDecay[nu]]], {nu, frequencyRangeDecay}];
totalDecayData = Table[N[totalDecayRate[nu]], {nu, frequencyRangeDecay}];

plotDecayRates = ListLogLogPlot[{
  Transpose[{frequencyRangeDecay, linearDecayData}],
  Transpose[{frequencyRangeDecay, nonlinearDecayData}],
  Transpose[{frequencyRangeDecay, totalDecayData}]
  },
  PlotStyle -> {{Thick, Blue}, {Thick, Red}, {Thick, Black}},
  PlotLabel -> "Lattice Decay Rates (Equations 35-37)",
  AxesLabel -> {"Frequency (Hz)", "Decay Rate (s⁻¹)"},
  PlotLegends -> {"Linear", "Nonlinear Triadic", "Total"},
  PlotRange -> All
];

(* Chaos Amplification *)
timeRangeChaos = Table[t, {t, 0, 1*10^(-6), 1*10^(-8)}];
frequencyChaos = 3*10^12;
chaosData = Table[N[chaosAmplification[frequencyChaos, t]], {t, timeRangeChaos}];

plotChaosAmplification = ListLinePlot[Transpose[{timeRangeChaos*10^6, chaosData}],
  PlotStyle -> {Thick, Red},
  PlotLabel -> "Chaos Amplification at 3 THz",
  AxesLabel -> {"Time (μs)", "Amplitude"},
  PlotRange -> All
];

Print["✓ Decay and chaos visualizations created"];

(* ========================================================================= *)
(* SECTION 8: FOLD METRIC AND CTC PREVENTION *)
(* ========================================================================= *)

Print["🕰️ Creating fold metric and CTC prevention visualizations...");

(* Fold Metric Functions *)
rRangeFold = Table[r, {r, 0, 10*lambda, lambda/10}];
RfoldTest = 5*lambda;
fFoldData = Table[N[fFold[r, RfoldTest]], {r, rRangeFold}];
hFoldData = Table[N[hFold[r, RfoldTest]], {r, rRangeFold}];

plotFoldMetric = ListLinePlot[{
  Transpose[{rRangeFold/lambda, fFoldData}],
  Transpose[{rRangeFold/lambda, hFoldData}]
  },
  PlotStyle -> {{Thick, Blue}, {Thick, Red}},
  PlotLabel -> "Fold Metric Functions (Equations 51-52)",
  AxesLabel -> {"r/λ", "Metric Factor"},
  PlotLegends -> {"f(r)", "h(r)"},
  PlotRange -> All
];

(* Boundary Crossing Time Analysis *)
RfoldRangeCTC = Table[Rf, {Rf, lambda, 100*lambda, 5*lambda}];
boundaryCrossingData = Table[
  N[boundaryCrossingTime[Rf, fFold[0, Rf]]*10^21], (* Convert to attoseconds *)
  {Rf, RfoldRangeCTC}
];

plotBoundaryCrossing = ListLinePlot[Transpose[{RfoldRangeCTC/lambda, boundaryCrossingData}],
  PlotStyle -> {Thick, Purple},
  PlotLabel -> "Boundary Crossing Time (CTC Prevention)",
  AxesLabel -> {"Fold Radius (λ)", "Crossing Time (as)"},
  PlotRange -> All
];

Print["✓ Fold metric and CTC visualizations created"];

(* ========================================================================= *)
(* SECTION 9: DARK ENERGY AND COSMOLOGICAL PREDICTIONS *)
(* ========================================================================= *)

Print["🌑 Creating dark energy visualizations...");

(* Dark Energy Density Comparison *)
darkEnergyHLRT = darkEnergyDensity[];
darkEnergyObserved = 7*10^(-27);

plotDarkEnergyComparison = BarChart[
  {{"HLRT Prediction", N[Log10[darkEnergyHLRT]]}, 
   {"Observed", N[Log10[darkEnergyObserved]]}},
  PlotLabel -> "Dark Energy Density Comparison (Log₁₀ kg/m³)",
  ChartStyle -> "Pastel",
  ChartLabels -> Automatic
];

(* Galactic Structure Formation *)
rRangeGalactic = Table[r, {r, 10^15, 10^17, 10^16}]; (* meters *)
MGalactic = 10^12; (* Solar masses in kg *)
galacticStructureData = Table[
  N[galacticStructure[r, MGalactic]], 
  {r, rRangeGalactic}
];

plotGalacticStructure = ListLogLogPlot[Transpose[{rRangeGalactic, galacticStructureData}],
  PlotStyle -> {Thick, Blue},
  PlotLabel -> "HLRT Galactic Structure Formation",
  AxesLabel -> {"Radius (m)", "Density (kg/m³)"},
  PlotRange -> All
];

Print["✓ Dark energy visualizations created"];

(* ========================================================================= *)
(* SECTION 10: DISPLAY ALL VISUALIZATIONS *)
(* ========================================================================= *)

Print[""];
Print["🎨 DISPLAYING COMPLETE HLRT VISUALIZATION SUITE");
Print["==============================================="];

Print["1. FTL Gravitational Wave Velocity:"];
plotFTLVelocity

Print["2. Time Difference Analysis:"];
plotTimeDifference

Print["3. Hexagonal Lattice Anisotropy (3D):"];
plotHexAnisotropy3D

Print["4. Hexagonal Anisotropy Contours:"];
plotHexAnisotropyContour

Print["5. CMB Temperature Correlations:"];
plotCMBTemp

Print["6. CMB E-mode Polarization:"];
plotCMBEmode

Print["7. CMB B-mode Polarization:"];
plotCMBBmode

Print["8. CMB Observable Angular Scales:"];
plotAngularScales

Print["9. Venus Resonance Enhancement:"];
plotVenusResonance

Print["10. Venus Phase Space:"];
plotVenusPhase

Print["11. Magnetic Pole Drift and Core Displacement:"];
plotMagneticDrift

Print["12. Magnetic vs Rotational Pole Motion:"];
plotPoleComparison

Print["13. Scale-Dependent Graviton Mass:"];
plotGravitonMass

Print["14. Graviton Mass vs Field Strength:"];
plotGravitonMassPhi

Print["15. Lattice Decay Rates:"];
plotDecayRates

Print["16. Chaos Amplification:"];
plotChaosAmplification

Print["17. Fold Metric Functions:"];
plotFoldMetric

Print["18. Boundary Crossing Time (CTC Prevention):"];
plotBoundaryCrossing

Print["19. Dark Energy Density Comparison:"];
plotDarkEnergyComparison

Print["20. Galactic Structure Formation:"];
plotGalacticStructure

Print[""];
Print["✅ COMPLETE HLRT VISUALIZATION SUITE OPERATIONAL"];
Print["🌌 ALL PHENOMENA FROM PREPRINT VISUALIZED");
Print["📊 READY FOR COMPREHENSIVE ANALYSIS AND EMPIRICAL VALIDATION"];
Print["🚀 THE GEOMETRIC STRUCTURE OF THE UNIVERSE REVEALED!");

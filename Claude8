(* ========================================================================= *)
(* HLRT WORKING VISUALIZATIONS - PART 3 *)
(* Run this AFTER parts 1 and 2 *)
(* ========================================================================= *)

(* ========================================================================= *)
(* SECTION 8: BASIC VISUALIZATIONS THAT WORK *)
(* ========================================================================= *)

(* 1. FTL Velocity vs Wavevector *)
Print["üìä Creating FTL velocity visualization..."];

kRange = Range[10^6, 10^8, 10^7];
hValue = 10^(-20);
vGWData = Table[vGW[k, hValue]/c, {k, kRange}];

plot1 = ListLinePlot[Transpose[{kRange, vGWData}],
  PlotStyle -> Thick,
  PlotLabel -> "FTL Gravitational Wave Velocity",
  AxesLabel -> {"Wavevector k (1/m)", "vGW/c"},
  GridLines -> {None, {1, 1.16}},
  GridLinesStyle -> Directive[Red, Dashed]
];

Print["‚úì FTL velocity plot created"];

(* 2. Venus Resonance Over Time *)
Print["üìä Creating Venus resonance visualization..."];

timeRange = Range[2020, 2030, 0.5];
resonanceData = Table[venusResonance[t]/Phi0, {t, timeRange}];

plot2 = ListLinePlot[Transpose[{timeRange, resonanceData}],
  PlotStyle -> {Thick, Blue},
  PlotLabel -> "Venus Resonance Enhancement (2020-2030)",
  AxesLabel -> {"Year", "Resonance Factor"},
  GridLines -> {{2025}, None},
  GridLinesStyle -> Directive[Red, Dashed]
];

Print["‚úì Venus resonance plot created"];

(* 3. CMB Hexagonal Signature *)
Print["üìä Creating CMB hexagonal signature..."];

phiRange = Range[0, 2*Pi, Pi/20];
lValue = 1000;
cmbData = Table[CMBHexCorrelation[lValue, phi], {phi, phiRange}];

plot3 = ListLinePlot[Transpose[{phiRange*180/Pi, cmbData}],
  PlotStyle -> {Thick, Purple},
  PlotLabel -> "CMB Hexagonal Correlation (l=" <> ToString[lValue] <> ")",
  AxesLabel -> {"Angle œÜ (degrees)", "Correlation C_l"},
  PlotRange -> All
];

Print["‚úì CMB signature plot created"];

(* 4. Time Difference Analysis *)
Print["üìä Creating time difference analysis..."];

distanceRange = Range[1, 100, 5]; (* meters *)
timeDiffData = Table[
  Module[{tLight, tGW}, 
    tLight = d/c; 
    tGW = d/vGWTest; 
    (tLight - tGW)*10^9], (* in nanoseconds *)
  {d, distanceRange}
];

plot4 = ListLinePlot[Transpose[{distanceRange, timeDiffData}],
  PlotStyle -> {Thick, Green},
  PlotLabel -> "FTL Time Difference vs Distance",
  AxesLabel -> {"Distance (m)", "Time Difference (ns)"},
  GridLines -> {{10}, {4.6}},
  GridLinesStyle -> Directive[Red, Dashed]
];

Print["‚úì Time difference plot created"];

(* ========================================================================= *)
(* SECTION 9: DISPLAY THE PLOTS *)
(* ========================================================================= *)

Print[""];
Print["üé® DISPLAYING VISUALIZATIONS:");
Print["============================="];

(* Display plots individually to avoid memory issues *)
Print["1. FTL Velocity Plot:"];
plot1

Print["2. Venus Resonance Plot:"];
plot2

Print["3. CMB Hexagonal Signature:"];
plot3

Print["4. Time Difference Analysis:"];
plot4

(* ========================================================================= *)
(* SECTION 10: PARAMETER SENSITIVITY TESTING *)
(* ========================================================================= *)

Print[""];
Print["üîç PARAMETER SENSITIVITY ANALYSIS:");
Print["=================================="];

(* Test alpha sensitivity *)
alphaRange = Range[0.01, 0.05, 0.01];
vGWSensitivity = Table[
  Block[{alpha = a}, vGW[10^7, 10^(-20)]/c],
  {a, alphaRange}
];

Print["Alpha sensitivity:"];
Print["Values: ", alphaRange];
Print["vGW/c: ", N[vGWSensitivity]];
Print["Range: ", N[Max[vGWSensitivity] - Min[vGWSensitivity]]];

(* Test betaFold sensitivity *)
betaFoldRange = Range[1.10, 1.20, 0.02];
betaSensitivity = Table[
  Block[{betaFold = bf}, vGW[10^7, 10^(-20)]/c],
  {bf, betaFoldRange}
];

Print[""];
Print["BetaFold sensitivity:"];
Print["Values: ", betaFoldRange];
Print["vGW/c: ", N[betaSensitivity]];
Print["Range: ", N[Max[betaSensitivity] - Min[betaSensitivity]]];

(* ========================================================================= *)
(* SECTION 11: EMPIRICAL TARGETS *)
(* ========================================================================= *)

Print[""];
Print["üéØ EMPIRICAL VALIDATION TARGETS:");
Print["================================"];

(* Geo-EM Amplifier targets *)
targetDistance = 10; (* meters *)
targetTimeDiff = 4.6; (* nanoseconds *)
actualTimeDiff = (targetDistance/c - targetDistance/vGWTest)*10^9;

Print["Geo-EM Amplifier (10m test):"];
Print["Target time difference: ", targetTimeDiff, " ns"];
Print["Predicted difference: ", N[actualTimeDiff], " ns"];
Print["Agreement: ", If[Abs[actualTimeDiff - targetTimeDiff] < 1, "‚úì EXCELLENT", "‚ö† NEEDS TUNING"]];

(* Simons Observatory targets *)
simonsLRange = {50, 3000};
simonsAngles = Table[observableAngleArcmin[l], {l, simonsLRange}];

Print[""];
Print["Simons Observatory CMB detection:"];
Print["l-range: ", simonsLRange];
Print["Angular scales: ", N[simonsAngles], " arcminutes"];
Print["Detector capability: 0.5-5 arcminutes"];
Print["Detectability: ", If[simonsAngles[[2]] > 0.5 && simonsAngles[[1]] < 5, "‚úì FEASIBLE", "‚ö† MARGINAL"]];

(* Magnetic pole convergence *)
currentDrift = magneticPoleDrift[];
yearsTo2030 = 5;
totalDrift2030 = currentDrift*yearsTo2030;

Print[""];
Print("Magnetic pole convergence by 2030:");
Print["Current drift rate: ", N[currentDrift], " deg/year"];
Print["Expected drift by 2030: ", N[totalDrift2030], " degrees"];
Print["Siberian convergence: ", If[totalDrift2030 > 1, "‚úì LIKELY", "‚ö† SLOW"]];

Print[""];
Print["‚úÖ ALL VISUALIZATIONS AND ANALYSIS COMPLETE!");
Print["üöÄ Ready for Geo-EM Amplifier construction and empirical validation!");
